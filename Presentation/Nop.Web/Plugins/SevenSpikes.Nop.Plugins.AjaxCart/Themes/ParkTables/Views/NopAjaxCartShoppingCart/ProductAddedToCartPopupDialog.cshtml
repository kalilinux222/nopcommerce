@** Copyright 2015 Seven Spikes Ltd. All rights reserved. (http://www.nop-templates.com)
* http://www.nop-templates.com/t/licensinginfo
*@

@using Nop.Core
@using Nop.Core.Domain.Orders
@using Nop.Core.Infrastructure
@using Nop.Services.Catalog
@using Nop.Services.Configuration

@model SevenSpikes.Nop.Plugins.AjaxCart.Models.ProductAddedToCartPopupDialogModel

@{
    var workContext = EngineContext.Current.Resolve<IWorkContext>();
    var storeContext = EngineContext.Current.Resolve<IStoreContext>();
    var settingService = EngineContext.Current.Resolve<ISettingService>();
    var productTemplateService = EngineContext.Current.Resolve<IProductTemplateService>();

    var miniProductDetailsViewImageSize = settingService.GetSettingByKey("nopajaxcartsettings.miniproductdetailsviewimagesize", 210, storeContext.CurrentStore.Id, true);

    var shoppingCartItemModel = Model.MiniShoppingCart.Items[0];

    var shoppingCartItem = workContext.CurrentCustomer.ShoppingCartItems.Where(sci => sci.ShoppingCartType == ShoppingCartType.ShoppingCart && sci.ProductId == shoppingCartItemModel.ProductId).OrderByDescending(x => x.UpdatedOnUtc).FirstOrDefault();

    var productTemplate = productTemplateService.GetProductTemplateById(shoppingCartItem.Product.ProductTemplateId);
}
<div class="productAddedToCartWindow">
    <div class="productAddedToCartWindowTitle">
        @T("SevenSpikes.NopAjaxCart.ShoppingCartNotificationBoxTitle")
    </div>
    <div class="productAddedToCartItem">
        <div class="productAddedToCartWindowImage">
            <a href="@Url.RouteUrl("Product", new { SeName = shoppingCartItemModel.ProductSeName })" title="@shoppingCartItemModel.Picture.Title">
                <img alt="@shoppingCartItemModel.Picture.AlternateText" src="@shoppingCartItemModel.Picture.ImageUrl" title="@shoppingCartItemModel.Picture.Title" />
            </a>
        </div>
        <div class="productAddedToCartWindowDescription">
            <h1>
                <a href="@Url.RouteUrl("Product", new { SeName = shoppingCartItemModel.ProductSeName })">@shoppingCartItemModel.ProductName</a>
            </h1>
            <div class="attributeInfo">@Html.Raw(shoppingCartItemModel.AttributeInfo)</div>
            <strong class="price">@shoppingCartItemModel.Quantity x <span>@shoppingCartItemModel.UnitPrice</span></strong>
        </div>
        <div class="productAddedToCartWindowSummary">

            @if (Model.MiniShoppingCart.DisplayCheckoutButton)
            {
                var checkoutUrl = "";
                if (Model.MiniShoppingCart.AnonymousCheckoutAllowed && Model.MiniShoppingCart.CurrentCustomerIsGuest)
                {
                    checkoutUrl = Url.RouteUrl("LoginCheckoutAsGuest", new { returnUrl = Url.RouteUrl("ShoppingCart") });
                }
                else
                {
                    checkoutUrl = Url.RouteUrl("Checkout");
                }
                <a class="viewBasketLink" href="@Url.RouteUrl("ShoppingCart")">@T("SevenSpikes.NopAjaxCart.ShoppingCartNotificationBoxViewYourBasket")</a>
                <div>
                    <input type="submit" class="button-1 productAddedToCartWindowCheckout" value="@T("Checkout.Button")" onclick="setLocation('@checkoutUrl');" />
                </div>
            }
            else
            {
                <div>
                    <input type="submit" class="button-1 productAddedToCartWindowCheckout" value="@T("ShoppingCart.Mini.ViewCart")" onclick="setLocation('@Url.RouteUrl("ShoppingCart")');" />
                </div>
            }
            <a class="continueShoppingLink" href="#">@T("SevenSpikes.NopAjaxCart.ShoppingCartNotificationBoxContinueShopping")</a>
        </div>
    </div>
    
    @if (Model.EnableRelatedProductsInPopup)
    {
        @Html.Action("GetRelatedProducts", "NopAjaxCartCatalog", new { productId = shoppingCartItemModel.ProductId })
    }
    
    @if (Model.EnableCrossSellProductsInPopup)
    {
        @Html.Action("GetCrossSellProducts", "NopAjaxCartCatalog", new {productId = shoppingCartItemModel.ProductId})
    }

    @if (productTemplate.ViewPath.EndsWith("ColorConfigurator"))
    {
        <script type="text/javascript">
        
            $(document).ready(function () {

                $('.productAddedToCartWindowImage a').append('<div class="image-loader"></div>');

                $.ajax({
                    cache: false,
                    url: '@Html.Raw(Url.Action("GetImagePreview", "ColorConfigurator", new { shoppingCartItemId = shoppingCartItem.Id, pictureSize = miniProductDetailsViewImageSize }))',
                    type: 'GET',
                    success: function (data) {

                        if (data && data.length > 0) {

                            $('.productAddedToCartWindowImage img').attr("src", data);

                            $('.image-loader').remove();
                        }
                    }
                });
            });
        </script>
    }
</div>